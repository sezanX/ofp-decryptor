
name: OFP Decrypter by SEZAN-X

on:
  workflow_dispatch:
    inputs:
      ofp_link:
        description: 'OFP Firmware Link'
        required: true
      bigfile:
        description: 'Set to YES if your OFP file is more than 8GB. Setting this will clean up the environment for larger files.'
        required: false
        default: 'NO'

env:
  OFP_LINK: ${{ github.event.inputs.ofp_link }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Clean Up Environment (For Large Files)
        if: ${{ github.event.inputs.bigfile == 'YES' }}
        uses: rokibhasansagar/slimhub_actions@main

      - name: Download OFP Firmware
        run: |
          aria2c -c -s16 -x16 "$OFP_LINK" || wget -q --show-progress "$OFP_LINK"
          OFPFILE=${OFP_LINK##*/}
          echo "OFP_FILE=${OFPFILE}" >> ${GITHUB_ENV}
          OFPNAME=${OFPFILE%.*}
          echo "OFP_NAME=${OFPNAME}" >> ${GITHUB_ENV}

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq aria2 zip rsync sshpass python3-pip
          pip3 install --upgrade pip setuptools wheel pycryptodome

      - name: Clone OPPO Decrypt Repository
        run: git clone https://github.com/bkerler/oppo_decrypt.git --depth=1

      - name: Decrypt OFP File
        run: |
          printf "Attempting to decrypt QC OFP...\n"
          python3 ./oppo_decrypt/ofp_qc_extract.py "$OFP_FILE" out || true

          if [[ ! -f out/super.img && ! -f out/system.img ]]; then
            printf "Attempting to decrypt MTK OFP...\n"
            python3 ./oppo_decrypt/ofp_mtk_decrypt.py "$OFP_FILE" out || true
          fi

          if [[ ! -f out/super.img && ! -f out/system.img ]]; then
            printf "Decryption failed.\n" && exit 1
          fi

      - name: Compress Decrypted Files
        run: |
          zip -r9 Decrypted."${OFP_NAME}".zip out/

      - name: Upload to SourceForge
        env:
          SFUSER: ${{ secrets.SFUSER }}
          SFPASS: ${{ secrets.SFPASS }}
          SFDIR: ${{ secrets.SFDIR }}
        run: |
          echo "exit" | sshpass -p $SFPASS ssh -tto StrictHostKeyChecking=no $SFUSER@shell.sourceforge.net create
          rsync -arvPz --rsh="sshpass -p $SFPASS ssh -l $SFUSER" Decrypted."${OFP_NAME}".zip $SFUSER@shell.sourceforge.net:/home/frs/project/$SFDIR/"$OFP_NAME"/
          printf "\nGet your file at https://sourceforge.net/projects/$SFDIR/$OFP_NAME/Decrypted.${OFP_NAME}.zip\n"
